## LESSON 1 ##
-console.log() is the command to print something on console.
-Linking exteral script:
  <script src="javascript.js" defer></script>

Variables declaration:
1) var x = 5; are function or global scope bt not block scope
var are are declared as function begins but assigned where they're written
2) let name = "Saeed";
3) const color="255,255,255";

-Operators same as python.
-we can use 2e3 for = 2000 for =bigger numbers
-number + string = concatenation
-string + number = concatenation

let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;

The JavaScript interpreter works from left to right.
First 10 + 20 is added because x and y are both numbers.
Then 30 + "30" is concatenated because z is a string.

-When using "10"/"2" or "10"/2 JS will convert strings into numbers
and perform maths arithmatic. But it wont work with + because its
concatenation operator.
-JS has Infinity and -Infinity. xdd
- typeof and toString
- == return true to '10'==10 but === does not as === is strict.
- tofixed() to  round up decimals
- Number() to convert string into numbers.

## LESSON 2 ##
STRINGS:
-Declared using ' '," ", ` `.
- ` ` are used for embedding javascript or declare template literals over mutiple lines
const name = "Chris";
const greeting = `Hello, ${name}`;
console.log(greeting); // "Hello, Chris"

const one = "Hello, ";
const two = "how are you?";
const joined = `${one}${two}`;
console.log(joined); // "Hello, how are you?"

Newline string:
const newline = `One day you finally knew
what you had to do, and began,`;
console.log(newline);

/*
One day you finally knew
what you had to do, and began,
*/

-or just use \n lol.

-To include '' or "" or any other to make part  of your string use \
-String() function converts its argument to a string.

MDN String reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
https://www.w3schools.com/js/js_string_methods.asp
https://www.w3schools.com/jsref/jsref_obj_string.asp

CONDITIONALS:
-Exact same as C/C++.

## LESSON 3 ##
SKIPPED for now

## LESSON 4 ##
FUNCTIONS:

function myFunction() {
  alert("hello");
}

myFunction();
// calls the function once

-Default parameters main parameter ko value de dete hain.

Anonymous function: function with no name

(function () {
  alert("hello");
});

textBox.addEventListener("keydown", function (event) {
  console.log(`You pressed "${event.key}".`);
});

Arrow functions:
textBox.addEventListener("keydown", (event) => {
  console.log(`You pressed "${event.key}".`);
});

() can have multiple parameters.

//
const originals = [1, 2, 3];
const doubled = originals.map(item => item * 2);
console.log(doubled); // [2, 4, 6]

is === to

function doubleItem(item) {
  return item * 2;
}
//

## LESSON 10 ##
--Arrays--

const cars = [
  "Saab",
  "Volvo",
  "BMW"
];

or

const cars = new Array("Saab", "Volvo", "BMW");

-Accessing values of array index:

let car = cars[0];
cars[0] = "Opel";

- converts array into string:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Result:

Banana,Orange,Apple,Mango

-Dictionaries:
const person = {firstName:"John", lastName:"Doe", age:46};
document.getElementById("demo").innerHTML = person.firstName;

-Arrays can store multiple datatypes including functions and arrays.

-Methods:
cars.length   // Returns the number of elements
cars.sort()   // Sorts the array
Array.forEach() // to loop through each element in array
array.push() // to add new element in the end of array
array.pop() // removes last element 
array.shift() // removes first element
array.unshift() // adds element to first index and unshifts
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

The splice() method returns an array with the deleted items:
Slice can be used to create new array from current array.
-In JavaScript, arrays use numbered indexes.  
-In JavaScript, objects use named indexes.


-Nested Arrays and objects:
const myObj = {
  name: "John",
  age: 30,
  cars: [
    {name:"Ford", models:["Fiesta", "Focus", "Mustang"]},
    {name:"BMW", models:["320", "X3", "X5"]},
    {name:"Fiat", models:["500", "Panda"]}
  ]
}

-- Loops --
const cats = ["Leopard", "Serval", "Jaguar", "Tiger", "Caracal", "Lion"];

for (const cat in cats) {
  console.log(cat);
}

-in cats returns the indexes
-of cats returns the values.
-map(func()) is a functions that can call function for each element in array
-filter(func()) only makes new array with element that is returned true by func()
-for loop can work like c/c++ one too.
-exit loop with break;
-skip iteration using continue;
-while loop is same as python/c++.
-do while same as c/c++.
-using labels to break/continue out of specific loop:
outer: for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(`Value at coords (${i},${j})`, '');

    // if an empty string or canceled, then break out of both loops
    if (!input) break outer; // (*)

    // do something with the value...
  }
}

alert('Done!');

## LESSON 11 ##

-element.querySelector(selector) - returns a reference to the first match of selector.
-element.querySelectorAll(selectors) - returns a “NodeList” containing references to all of the matches of the selectors.
-document.createElement(tagName, [options]) - creates a new element of tag type tagName. [options] in this case means you can add some optional parameters to the function.
-created elements are not placed in dom but memory for testing.
-To add element into DOM:
Append elements
parentNode.appendChild(childNode) - appends childNode as the last child of parentNode.
parentNode.insertBefore(newNode, referenceNode) - inserts newNode into parentNode before referenceNode.
Remove elements
parentNode.removeChild(child) - removes child from parentNode on the DOM and returns a reference to child.

-Altering Elements:
// creates a new div referenced in the variable 'div'
const div = document.createElement("div");
// adds the indicated style rule to the element in the div variable
div.style.color = "blue";

// adds several style rules
div.style.cssText = "color: blue; background: white;";

// adds several style rules
div.setAttribute("style", "color: blue; background: white;");

-What works and not works with kebab-cases:
// dot notation with kebab case: doesn't work as it attempts to subtract color from div.style.background
// equivalent to: div.style.background - color
div.style.background-color;

// dot notation with camelCase: works, accesses the div's background-color style
div.style.backgroundColor;

// bracket notation with kebab-case: also works
div.style["background-color"];

// bracket notation with camelCase: also works
div.style["backgroundColor"];

-Editing Attributes:
// if id exists, update it to 'theDiv', else create an id with value "theDiv"
div.setAttribute("id", "theDiv");

// returns value of specified attribute, in this case "theDiv"
div.getAttribute("id");

// removes specified attribute
div.removeAttribute("id");

-working with classes:
// adds class "new" to your new div
div.classList.add("new");

// removes "new" class from div
div.classList.remove("new");

// if div doesn't have class "active" then add it, or if it does, then remove it
div.classList.toggle("active");

-// creates a text node containing "Hello World!" and inserts it in div
div.textContent = "Hello World!";

-// renders the HTML inside div
div.innerHTML = "<span>Hello World!</span>";

-Events:
<!-- the HTML file -->
<!-- METHODS 2 & 3 -->
<button id="btn">CLICK ME BABY</button>

// the JavaScript file
// METHODS 2 & 3
function alertFunction() {
  alert("YAY! YOU DID IT!");
}
const btn = document.querySelector("#btn");

// METHOD 2
btn.onclick = alertFunction;

// METHOD 3
btn.addEventListener("click", alertFunction);

-Best way:
btn.addEventListener("click", function (e) {
  e.target.style.background = "blue";
});
// e is an object 

-ADding event to multiple elements:
<div id="container">
  <button id="1">Click Me</button>
  <button id="2">Click Me</button>
  <button id="3">Click Me</button>
</div>

// buttons is a node list. It looks and acts much like an array.
const buttons = document.querySelectorAll("button");

// we use the .forEach method to iterate through each button
buttons.forEach((button) => {
  // and for each one we add a 'click' listener
  button.addEventListener("click", () => {
    alert(button.id);
  });
});

## Lesson 14 ##
--Objects declaration--:
let user = {     // an object
  name: "John",  // by key "name" store value "John"
  age: 30        // by key "age" store value 30
};

or 

let user = new Object();

-add value: user.isAdmin = true;
-delete value: delete user.age;

let user = {};

// set
user["likes birds"] = true;

// get
alert(user["likes birds"]); // true

// delete
delete user["likes birds"];

-Little complex ones:
let fruit = 'apple';
let bag = {
  [fruit + 'Computers']: 5 // bag.appleComputers = 5
};

-Using functions:
function makeUser(name, age) {
  return {
    name: name,
    age: age,
    // ...other properties
  };
}

let user = makeUser("John", 30);
alert(user.name); // John

-Checking existence:
let user = { age: 30 };

let key = "age";
alert( key in user ); // true, property "age" exists

-loops and objects:
let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

for (let key in user) {
  // keys
  alert( key );  // name, age, isAdmin
  // values for the keys
  alert( user[key] ); // John, 30, true
}

-keys are listed in creation order if not integers.

=reduce=
const arr = [1, 2, 3, 4, 5];
const productOfAllNums = arr.reduce((total, currentItem) => {
  return total * currentItem;
}, 1);
console.log(productOfAllNums); // Outputs 120;
console.log(arr); // Outputs [1, 2, 3, 4, 5]

So what .reduce() will do, is it will once again go through every element in arr and apply the callback function to it. It then changes total, without actually changing the array itself. After it’s done, it returns total.
