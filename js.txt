## LESSON 1 ##
-console.log() is the command to print something on console.
-Linking exteral script:
  <script src="javascript.js"></script>

Variables declaration:
1) var x = 5; are function or global scope bt not block scope
var are are declared as function begins but assigned where they're written
2) let name = "Saeed";
3) const color="255,255,255";

-Operators same as python.
-we can use 2e3 for = 2000 for =bigger numbers
-number + string = concatenation
-string + number = concatenation

let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;

The JavaScript interpreter works from left to right.
First 10 + 20 is added because x and y are both numbers.
Then 30 + "30" is concatenated because z is a string.

-When using "10"/"2" or "10"/2 JS will convert strings into numbers
and perform maths arithmatic. But it wont work with + because its
concatenation operator.
-JS has Infinity and -Infinity. xdd
- typeof and toString
- == return true to '10'==10 but === does not as === is strict.
- tofixed() to  round up decimals
- Number() to convert string into numbers.

## LESSON 2 ##
STRINGS:
-Declared using ' '," ", ` `.
- ` ` are used for embedding javascript or declare template literals over mutiple lines
const name = "Chris";
const greeting = `Hello, ${name}`;
console.log(greeting); // "Hello, Chris"

const one = "Hello, ";
const two = "how are you?";
const joined = `${one}${two}`;
console.log(joined); // "Hello, how are you?"

Newline string:
const newline = `One day you finally knew
what you had to do, and began,`;
console.log(newline);

/*
One day you finally knew
what you had to do, and began,
*/

-or just use \n lol.

-To include '' or "" or any other to make part  of your string use \
-String() function converts its argument to a string.

MDN String reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
https://www.w3schools.com/js/js_string_methods.asp
https://www.w3schools.com/jsref/jsref_obj_string.asp

CONDITIONALS:
-Exact same as C/C++.

## LESSON 3 ##
SKIPPED for now

## LESSON 4 ##
FUNCTIONS:

function myFunction() {
  alert("hello");
}

myFunction();
// calls the function once

-Default parameters main parameter ko value de dete hain.

Anonymous function: function with no name

(function () {
  alert("hello");
});

textBox.addEventListener("keydown", function (event) {
  console.log(`You pressed "${event.key}".`);
});

Arrow functions:
textBox.addEventListener("keydown", (event) => {
  console.log(`You pressed "${event.key}".`);
});

() can have multiple parameters.

//
const originals = [1, 2, 3];
const doubled = originals.map(item => item * 2);
console.log(doubled); // [2, 4, 6]

is === to

function doubleItem(item) {
  return item * 2;
}
//

