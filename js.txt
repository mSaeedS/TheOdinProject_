## LESSON 1 ##
-console.log() is the command to print something on console.
-Linking exteral script:
  <script src="javascript.js"></script>

Variables declaration:
1) var x = 5; are function or global scope bt not block scope
var are are declared as function begins but assigned where they're written
2) let name = "Saeed";
3) const color="255,255,255";

-Operators same as python.
-we can use 2e3 for = 2000 for =bigger numbers
-number + string = concatenation
-string + number = concatenation

let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;

The JavaScript interpreter works from left to right.
First 10 + 20 is added because x and y are both numbers.
Then 30 + "30" is concatenated because z is a string.

-When using "10"/"2" or "10"/2 JS will convert strings into numbers
and perform maths arithmatic. But it wont work with + because its
concatenation operator.
-JS has Infinity and -Infinity. xdd
- typeof and toString
- == return true to '10'==10 but === does not as === is strict.
- tofixed() to  round up decimals
- Number() to convert string into numbers.

## LESSON 2 ##
STRINGS:
-Declared using ' '," ", ` `.
- ` ` are used for embedding javascript or declare template literals over mutiple lines
const name = "Chris";
const greeting = `Hello, ${name}`;
console.log(greeting); // "Hello, Chris"

const one = "Hello, ";
const two = "how are you?";
const joined = `${one}${two}`;
console.log(joined); // "Hello, how are you?"

Newline string:
const newline = `One day you finally knew
what you had to do, and began,`;
console.log(newline);

/*
One day you finally knew
what you had to do, and began,
*/

-or just use \n lol.

-To include '' or "" or any other to make part  of your string use \
-String() function converts its argument to a string.

MDN String reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
https://www.w3schools.com/js/js_string_methods.asp
https://www.w3schools.com/jsref/jsref_obj_string.asp

CONDITIONALS:
-Exact same as C/C++.

## LESSON 3 ##
SKIPPED for now

## LESSON 4 ##
FUNCTIONS:

function myFunction() {
  alert("hello");
}

myFunction();
// calls the function once

-Default parameters main parameter ko value de dete hain.

Anonymous function: function with no name

(function () {
  alert("hello");
});

textBox.addEventListener("keydown", function (event) {
  console.log(`You pressed "${event.key}".`);
});

Arrow functions:
textBox.addEventListener("keydown", (event) => {
  console.log(`You pressed "${event.key}".`);
});

() can have multiple parameters.

//
const originals = [1, 2, 3];
const doubled = originals.map(item => item * 2);
console.log(doubled); // [2, 4, 6]

is === to

function doubleItem(item) {
  return item * 2;
}
//

## LESSON 10 ##
--Arrays--

const cars = [
  "Saab",
  "Volvo",
  "BMW"
];

or

const cars = new Array("Saab", "Volvo", "BMW");

-Accessing values of array index:

let car = cars[0];
cars[0] = "Opel";

- converts array into string:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Result:

Banana,Orange,Apple,Mango

-Dictionaries:
const person = {firstName:"John", lastName:"Doe", age:46};
document.getElementById("demo").innerHTML = person.firstName;

-Arrays can store multiple datatypes including functions and arrays.

-Methods:
cars.length   // Returns the number of elements
cars.sort()   // Sorts the array
Array.forEach() // to loop through each element in array
array.push() // to add new element in the end of array
array.pop() // removes last element 
array.shift() // removes first element
array.unshift() // adds element to first index and unshifts
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

The splice() method returns an array with the deleted items:
Slice can be used to create new array from current array.
-In JavaScript, arrays use numbered indexes.  
-In JavaScript, objects use named indexes.


-Nested Arrays and objects:
const myObj = {
  name: "John",
  age: 30,
  cars: [
    {name:"Ford", models:["Fiesta", "Focus", "Mustang"]},
    {name:"BMW", models:["320", "X3", "X5"]},
    {name:"Fiat", models:["500", "Panda"]}
  ]
}