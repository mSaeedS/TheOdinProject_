## LESSON 1 ##
-- HTML --
<div class="flex-container">
  <div class="one"></div>
  <div class="two"></div>
  <div class="three"></div>
</div>

-- CSS --
.flex-container {
  display: flex;
}

/* this selector selects all divs inside of .flex-container */
.flex-container div {
  background: peachpuff;
  border: 4px solid brown;
  height: 100px;
   flex: 1; 
}

-A flex container contains display: flex
-A flex item is an item inside of an flex container
-Flex item can become flex container and has its own flex items. (Nesting)

## LESSON 2 ##
-flex is shorthand for flex-grow, flex-shrink and flex-basis.
-flex: 1 equates to: flex-grow: 1, flex-shrink: 1, flex-basis: 0.
-flex-grow grows the item i.e increases size
-flex-shrink decreases item size if all the items are bigger than container.
-flex-basis makes shrinking or growing from a baseline size. Default is 0
-Using auto as a flex-basis tells the item to check for a width
-flex: auto = 1 1 auto

-items cant be shrinked more than element minimum size
-to change minimum size use min-width

## LESSON 3 ##
-Axes : 
.flex-container {
  flex-direction: column;
}
 -flex-direction: row puts the main axis horizontal (left-to-right)
 -column puts the main axis vertical (top-to-bottom).

-Use flex: 1 1 auto with height defined instead of 1 1 0.
-1 1 0 means div have  default height 0 so it will collapse

.flex-container {
  display: flex;
  flex-direction: column; 
}

/* this selector selects all divs inside of .flex-container */
.flex-container div {
  background: peachpuff;
  border: 4px solid brown;
  height: 80px;
  flex: 1 1 auto;
}

## LESSON 4 ##
When flex-direction is row:
-justify content aligns item horizontally 
align-items aligns items vertically

vice versa when flex direction is column;
-gap adds gap between items like margin.

.container {
  height: 140px;
  padding: 16px;
  background: plum;
  border: 4px solid indigo;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.item {
  width: 60px;
  height: 60px;
  border: 4px solid darkslategray;
  background: skyblue;
}

-if a specific items needs to be aligned we use align-self

-flex-wrap: wrap allows to wrap item into new column/row instead of shrinking
-flex-wrap: wrap gives us two rows of stuff.
-Within each row, align-items lets us slide each individual child up or down
-The cross axis will now intersect two rows, not one. And so, we can't move the rows individually, we need to distribute them as a group.
- the cross axis! And so the property we want is align-content.




